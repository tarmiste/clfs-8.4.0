<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;
]>

<sect1 id="pre-hostreqs">
  <?dbhtml filename="hostreqs.html"?>

  <title>Host System Requirements</title>

    <para>You should be able to build a CLFS system from just about any
    Unix-type operating system. Your host system should have the following
    software with the minimum versions indicated. Also note that many
    distributions will place software headers into separate packages, often in
    the form of <quote>[package-name]-devel</quote> or
    <quote>[package-name]-dev</quote>. Be sure to install those if
    your distribution provides them.</para>

  <itemizedlist spacing="compact">

    <listitem>
      <para><emphasis role="strong">Bash-3.2</emphasis> (/bin/sh
      should be a symbolic or hard link to bash)</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Binutils-2.25</emphasis> (Versions
      greater than &binutils-version; are not recommended as they have
      not been tested)</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Bison-2.7</emphasis> (/usr/bin/yacc
      should be a link to bison or small script that executes bison)</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Bzip2-1.0.4</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Coreutils-6.9</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Diffutils-2.8.1</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Findutils-4.2.31</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Gawk-4.0.1</emphasis> (/usr/bin/awk
      should be a link to gawk)</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">GCC-5.2</emphasis> including the C++
      compiler, <command>g++</command> (Versions greater than &gcc-version; are
      not recommended as they have not been tested)</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Glibc-2.11</emphasis> (Versions
      greater than &glibc-version; are not recommended as they have
      not been tested)</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Grep-2.5.1a</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Gzip-1.3.12</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Linux Kernel-&min-kernel;</emphasis></para>

      <para>The reason for the kernel version requirement is that we specify
      that version when building <application>glibc</application> in Chapter&nbsp;6
      at the recommendation of the developers.  It is also required by
      udev.</para>

      <para>If the host kernel is earlier than &min-kernel; you will need to replace
      the kernel with a more up to date version. There are two ways
      you can go about this. First, see if your Linux vendor provides a &min-kernel;
      or later kernel package. If so, you may wish to install it. If your
      vendor doesn't offer an acceptable kernel package, or you would prefer not to
      install it, you can compile a kernel yourself. Instructions for
      compiling the kernel and configuring the boot loader (assuming the host
      uses GRUB) are located in <xref linkend="chapter-bootable"/>.</para>

    </listitem>

    <listitem>
      <para><emphasis role="strong">M4-1.4.10</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Make-4.0</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Patch-2.5.4</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Perl-5.8.8</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Python-3.4</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Sed-4.1.5</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Tar-1.22</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Texinfo-4.7</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Xz-5.0.0</emphasis></para>
    </listitem>

  </itemizedlist>

  <para>To see whether your host system has all the appropriate versions,
  create and run the following script. Read the output carefully for any
  errors, and make sure to install any packages that are reported as not found.</para>

<screen role="nodump"><userinput>cat &gt; version-check.sh &lt;&lt; "EOF"
<literal>#!/bin/bash

# Simple script to list version numbers of critical development tools

bash --version | head -n1 | cut -d" " -f2-4
echo -n "Binutils: "; ld --version | head -n1 | cut -d" " -f3-
bison --version | head -n1
bzip2 --version 2&gt;&amp;1 &lt; /dev/null | head -n1 | cut -d" " -f1,6-
echo -n "Coreutils: "; chown --version | head -n1 | cut -d")" -f2
diff --version | head -n1
find --version | head -n1
gawk --version | head -n1
gcc --version | head -n1
g++ --version | head -n1
ldd $(which ${SHELL}) | grep libc.so | cut -d ' ' -f 3 | ${SHELL} | head -n 1 | cut -d ' ' -f 1-7
grep --version | head -n1
gzip --version | head -n1
make --version | head -n1
tic -V
patch --version | head -n1
sed --version | head -n1
tar --version | head -n1
makeinfo --version | head -n1
xz --version | head -n1
echo 'int main(){}' | gcc -v -o /dev/null -x c - &gt; dummy.log 2>&amp;1
if ! grep -q ' error' dummy.log; then
  echo "Compilation successful" &amp;&amp; rm dummy.log
else
  echo 1>&amp;2  "Compilation FAILED - more development packages may need to be \
installed. If you like, you can also view dummy.log for more details."
fi</literal>
EOF

bash version-check.sh 2>errors.log &amp;&amp;
[ -s errors.log ] &amp;&amp; echo -e "\nThe following packages could not be found:\n$(cat errors.log)"</userinput></screen>

</sect1>
